The ``101-lazy_matrix_mul`` module
=============================

Using ``lazy_matrix_mul``
---------------------

We first import ``lazy_matrix_mul`` and use it below

>>> mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

>>> a1 = [[1,2,3], [2, 3],[3,4,5]]

>>> a2 = [[5, 6, 2],[7, 8, 4]]

>>> a3 = [[2, 3, 1],[4, 1, 5],[6, 2, 3]]

>>> mul(True, [])
Traceback (most recent call last):
	...
TypeError: m_a must be a list

>>> mul([], True)
Traceback (most recent call last):
	...
TypeError: m_b must be a list


-----------------------------


>>> mul([True], a2)
Traceback (most recent call last):
	...
TypeError: m_a must be a list of lists

>>> mul(a2, [8])
Traceback (most recent call last):
	...
TypeError: m_b must be a list of lists


--------------------------------------

>>> mul([], a2)
Traceback (most recent call last):
	...
ValueError: m_a can't be empty

>>> mul([[]], a2)
Traceback (most recent call last):
	...
ValueError: m_a can't be empty

>>> mul(a2, [])
Traceback (most recent call last):
	...
ValueError: m_b can't be empty

>>> mul(a2, [[]])
Traceback (most recent call last):
	...
ValueError: m_b can't be empty

------------------------------

>>> mul([[9, "another", 2]], a2)
Traceback (most recent call last):
	...
TypeError: m_a should contain only integers or floats

>>> mul(a2, [[9, "strange", 2]])
Traceback (most recent call last):
	...
TypeError: m_b should contain only integers or floats

------------------------------------

>>> mul(a1, a2)
Traceback (most recent call last):
	...
TypeError: each row of m_a must be of the same size

>>> mul(a2, a1)
Traceback (most recent call last):
	...
TypeError: each row of m_b must be of the same size


----------------------------------------------

Case dimensions:
a is mx, b is my, :. c can be xy in dimension

>>> mul(a2, [[1,2], [3, 4]])
Traceback (most recent call last):
	...
ValueError: m_a and m_b can't be multiplied


---------------------------------------------

>>> mul([[5, 6, 2],[7, 8, 4]],    [[2, 3, 1],[4, 1, 5],[6, 2, 3]])
[[46, 25, 41], [70, 37, 59]]

>>> mul([[2, 3], [4, 1]], [[5, 6], [7, 8]])
[[31, 36], [27, 32]]

>>> mul([[1, 2], [3, 4]],    [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]
